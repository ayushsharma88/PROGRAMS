// A Divide and Conquer based program for maximum subarray sum problem
#include <stdio.h>
#include <limits.h>

// A utility funtion to find maximum of two integers
int max(int a, int b) { return (a > b)? a : b; }
 
// A utility funtion to find maximum of three integers
int max(int a, int b, int c) { return max(max(a, b), c); }

int CrossMax(int arr[],int l, int m,int h)
{
    int sum=0;
    int left_Sum=INT_MIN;
    for(int i=l;i<=m;i++)
    {
        sum=sum+arr[i];
        if(sum>left_Sum)
        left_Sum=sum;
    }
    
    sum=0;
    int right_Sum=INT_MIN;
    for(int i=m+1;i<=h;i++)
    {
        sum=sum+arr[i];
        if(sum>right_Sum)
        right_Sum=sum;
    }
    
    
    return left_Sum+right_Sum;
}

int maxSubArraySum(int arr[],int low,int high)
{
    if(low==high)
    {
        return arr[low];
    }
    
    int mid=(low+high)/2;
    
    return max(maxSubArraySum(arr,low,mid),maxSubArraySum(arr,mid+1,high),CrossMax(arr,low,mid,high));
}

int main()
{
   int arr[] = {2, 3, 4, 5, 7};
   int n = sizeof(arr)/sizeof(arr[0]);
   int max_sum = maxSubArraySum(arr, 0, n-1);
   printf("Maximum contiguous sum is %d\n", max_sum);
   getchar();
   return 0;
}
